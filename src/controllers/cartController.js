import pool from "../config/db.js";

/* ---------------------------- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏•‡∏á‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô ---------------------------- */
export async function addToCart(req, res) {
  const { user_id, game_id, quantity = 1 } = req.body;
  if (!user_id || !game_id) {
    return res.status(400).json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ user_id ‡πÅ‡∏•‡∏∞ game_id" });
  }

  const connection = await pool.getConnection();
  try {
    await connection.beginTransaction();

    // 1Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ cart ‡∏Ç‡∏≠‡∏á user ‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏°
    const [cartRows] = await connection.query(
      "SELECT cart_id FROM Cart WHERE user_id = ? AND status = 'active'",
      [user_id]
    );

    let cart_id;
    if (cartRows.length === 0) {
      // ‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      const [newCart] = await connection.query(
        "INSERT INTO Cart (user_id, status, created_at) VALUES (?, 'active', NOW())",
        [user_id]
      );
      cart_id = newCart.insertId;
    } else {
      cart_id = cartRows[0].cart_id;
    }

    // 2Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏´‡∏°
    const [itemRows] = await connection.query(
      "SELECT * FROM CartItem WHERE cart_id = ? AND game_id = ?",
      [cart_id, game_id]
    );

    if (itemRows.length > 0) {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß ‚ûú ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
      await connection.query(
        "UPDATE CartItem SET quantity = quantity + ? WHERE cart_id = ? AND game_id = ?",
        [quantity, cart_id, game_id]
      );
    } else {
      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‚ûú ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
      await connection.query(
        "INSERT INTO CartItem (cart_id, game_id, quantity) VALUES (?, ?, ?)",
        [cart_id, game_id, quantity]
      );
    }

    await connection.commit();
    res.json({ message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏•‡∏á‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üõí", cart_id });
  } catch (err) {
    await connection.rollback();
    console.error("‚ùå addToCart error:", err);
    res.status(500).json({ error: "Database error" });
  } finally {
    connection.release();
  }
}

/* ---------------------------- ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏°‡πÉ‡∏ô‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô ---------------------------- */
export async function getCartByUser(req, res) {
  const { user_id } = req.params;

  try {
    const [rows] = await pool.query(
      `
      SELECT ci.cart_item_id, g.game_id, g.name AS game_name, g.price, ci.quantity,
             (g.price * ci.quantity) AS total_price
      FROM Cart c
      JOIN CartItem ci ON c.cart_id = ci.cart_id
      JOIN Game g ON ci.game_id = g.game_id
      WHERE c.user_id = ? AND c.status = 'active'
    `,
      [user_id]
    );

    if (rows.length === 0)
      return res.json({ message: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Å‡∏°‡πÉ‡∏ô‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô", total_price: 0, items: [] });

    // ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const total = rows.reduce((sum, item) => sum + parseFloat(item.total_price), 0);

    res.json({
      message: "‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      total_price: total.toFixed(2),
      items: rows,
    });
  } catch (err) {
    console.error("‚ùå getCartByUser error:", err);
    res.status(500).json({ error: "Database error" });
  }
}

/* ---------------------------- ‡∏•‡∏ö‡πÄ‡∏Å‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô ---------------------------- */
export async function removeFromCart(req, res) {
  const { user_id, game_id } = req.body;
  if (!user_id || !game_id)
    return res.status(400).json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ user_id ‡πÅ‡∏•‡∏∞ game_id" });

  try {
    await pool.query(
      `DELETE ci FROM CartItem ci
       JOIN Cart c ON ci.cart_id = c.cart_id
       WHERE c.user_id = ? AND ci.game_id = ? AND c.status = 'active'`,
      [user_id, game_id]
    );

    res.json({ message: "‡∏•‡∏ö‡πÄ‡∏Å‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ üóëÔ∏è" });
  } catch (err) {
    console.error("‚ùå removeFromCart error:", err);
    res.status(500).json({ error: "Database error" });
  }
}

/* ---------------------------- ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ---------------------------- */
export async function clearCart(req, res) {
  const { user_id } = req.params;
  try {
    await pool.query(
      `DELETE ci FROM CartItem ci
       JOIN Cart c ON ci.cart_id = c.cart_id
       WHERE c.user_id = ? AND c.status = 'active'`,
      [user_id]
    );

    res.json({ message: "‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üßπ" });
  } catch (err) {
    console.error("‚ùå clearCart error:", err);
    res.status(500).json({ error: "Database error" });
  }
}
