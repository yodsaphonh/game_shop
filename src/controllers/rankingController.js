// src/controllers/rankingController.js
import pool from "../config/db.js";

/**
 * POST /ranking/rebuild
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Top-N ‡∏à‡∏≤‡∏Å GamePurchase ‡πÅ‡∏•‡πâ‡∏ß INSERT ‡∏•‡∏á GameRanking ‡∏Ç‡∏≠‡∏á "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ" (CURDATE).
 * Query/Body:
 *  - limit (number)  ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (default 10)
 *  - days  (number)  ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á n ‡∏ß‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á = ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
 *
 * ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:
 *  - JOIN Game ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô game_id ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ä‡∏ô FK)
 *  - ‡∏•‡∏ö‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏¥‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÉ‡∏™‡πà‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (snapshot ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô)
 */
export async function rebuildTodayRanking(req, res) {
  const limit = Number(req.body.limit ?? req.query.limit ?? 10);
  const days = req.body.days ?? req.query.days; // ‡πÄ‡∏ä‡πà‡∏ô 30

  const connection = await pool.getConnection();
  try {
    await connection.beginTransaction();

    // ‡∏•‡∏ö snapshot ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
    await connection.query(`DELETE FROM GameRanking WHERE rank_date = CURDATE()`);

    // where ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á n ‡∏ß‡∏±‡∏ô (‡∏ß‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô WHERE ‡∏Ç‡∏≠‡∏á JOIN block)
    const whereDays = (days && Number(days) > 0)
      ? `AND gp.purchase_date >= DATE_SUB(NOW(), INTERVAL ? DAY)`
      : ``;

    const params = [];
    if (days && Number(days) > 0) params.push(Number(days));
    params.push(limit);

    // ‡πÉ‡∏ä‡πâ derived table + ROW_NUMBER() (MySQL 8+)
    const sql = `
      INSERT INTO GameRanking (game_id, rank_position, rank_date)
      SELECT game_id, rn AS rank_position, CURDATE() AS rank_date
      FROM (
        SELECT 
          gp.game_id,
          ROW_NUMBER() OVER (
            ORDER BY COUNT(*) DESC, MIN(gp.game_id) ASC
          ) AS rn
        FROM GamePurchase gp
        JOIN Game g ON g.game_id = gp.game_id   -- ‚úÖ ‡∏Å‡∏±‡∏ô FK ‡∏ä‡∏ô
        WHERE 1=1
        ${whereDays}
        GROUP BY gp.game_id
      ) ranked
      ORDER BY rn
      LIMIT ?;
    `;

    const [result] = await connection.query(sql, params);

    await connection.commit();
    res.json({
      message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÄ‡∏Å‡∏°‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üèÜ",
      rank_date: new Date().toISOString().slice(0, 10),
      inserted_rows: result.affectedRows ?? 0,
      limit,
      days: days ? Number(days) : null,
    });
  } catch (err) {
    await connection.rollback();
    console.error("‚ùå rebuildTodayRanking error:", err);
    res.status(500).json({ error: err.message || "Database error" });
  } finally {
    connection.release();
  }
}

/**
 * GET /ranking/today
 * ‡∏î‡∏∂‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö (‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß) ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
 */
export async function getTodayRanking(_req, res) {
  try {
    const [rows] = await pool.query(
      `
      SELECT 
        gr.ranking_id,
        gr.game_id,
        gr.rank_position,
        gr.rank_date,
        g.name  AS game_name,
        g.cover_url,
        g.price
      FROM GameRanking gr
      JOIN Game g ON g.game_id = gr.game_id
      WHERE gr.rank_date = CURDATE()
      ORDER BY gr.rank_position ASC;
      `
    );

    res.json({
      message: "‡∏î‡∏∂‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÄ‡∏Å‡∏°‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ",
      rank_date: new Date().toISOString().slice(0, 10),
      ranking: rows,
    });
  } catch (err) {
    console.error("‚ùå getTodayRanking error:", err);
    res.status(500).json({ error: "Database error" });
  }
}

/**
 * GET /ranking/by-date?date=YYYY-MM-DD
 * ‡∏î‡∏∂‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà snapshot ‡πÑ‡∏ß‡πâ‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á date = ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)
 */
export async function getRankingByDate(req, res) {
  const date = req.query.date || new Date().toISOString().slice(0, 10);
  try {
    const [rows] = await pool.query(
      `
      SELECT 
        gr.ranking_id,
        gr.game_id,
        gr.rank_position,
        gr.rank_date,
        g.name  AS game_name,
        g.cover_url,
        g.price
      FROM GameRanking gr
      JOIN Game g ON g.game_id = gr.game_id
      WHERE gr.rank_date = ?
      ORDER BY gr.rank_position ASC;
      `,
      [date]
    );

    res.json({
      message: `‡∏î‡∏∂‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÄ‡∏Å‡∏°‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${date} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ`,
      rank_date: date,
      ranking: rows,
    });
  } catch (err) {
    console.error("‚ùå getRankingByDate error:", err);
    res.status(500).json({ error: "Database error" });
  }
}

/**
 * GET /ranking/preview?days=30&limit=5
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏ö‡∏ö on-the-fly (‡πÑ‡∏°‡πà INSERT) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Å‡πà‡∏≠‡∏ô rebuild
 */
export async function previewRanking(req, res) {
  const limit = Number(req.query.limit ?? 10);
  const days = req.query.days;

  try {
    const whereDays = (days && Number(days) > 0)
      ? `AND gp.purchase_date >= DATE_SUB(NOW(), INTERVAL ? DAY)`
      : ``;

    const params = [];
    if (days && Number(days) > 0) params.push(Number(days));
    params.push(limit);

    const [rows] = await pool.query(
      `
      SELECT 
        t.game_id,
        g.name AS game_name,
        t.total_sales,
        t.rank_position
      FROM (
        SELECT
          gp.game_id,
          COUNT(*) AS total_sales,
          ROW_NUMBER() OVER (
            ORDER BY COUNT(*) DESC, MIN(gp.game_id) ASC
          ) AS rank_position
        FROM GamePurchase gp
        JOIN Game g2 ON g2.game_id = gp.game_id  -- ‡∏Å‡∏±‡∏ô FK ‡∏ä‡∏ô
        WHERE 1=1
        ${whereDays}
        GROUP BY gp.game_id
        ORDER BY total_sales DESC
        LIMIT ?
      ) AS t
      JOIN Game g ON g.game_id = t.game_id
      ORDER BY t.rank_position ASC;
      `,
      params
    );

    res.json({
      message: "‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÄ‡∏Å‡∏°‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å) üëÄ",
      days: days ? Number(days) : null,
      limit,
      ranking: rows,
    });
  } catch (err) {
    console.error("‚ùå previewRanking error:", err);
    res.status(500).json({ error: "Database error" });
  }
}
